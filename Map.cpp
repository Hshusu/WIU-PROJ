#include "Map.h"

void Map::Move(const int x, const int y) {
	if ((mapVector[Player_Pos.Y + y][Player_Pos.X + x]) == '.') {
		Player_Pos.Y = (Player_Pos.Y + y);
		if (Player_Pos.Y < 0) {
			Player_Pos.Y = 0;
		}
		if (Player_Pos.Y > H - 1) {
			Player_Pos.Y = (H - 1);
		}
		Player_Pos.X = (Player_Pos.X + x);
		if (Player_Pos.X < 0) {
			Player_Pos.X = 0;
		}
		if (Player_Pos.X > W - 1) {
			Player_Pos.X = W - 1;
		}
	}
}

void Map::GenerateGrid()const
{
	COORD GridCoords = { max_Size.X / 3 - (Player_Pos.X * 3), max_Size.Y / 4 - Player_Pos.Y };
	SetConsoleCursorPosition(outputHandle, GridCoords);
	for (int col = 0; col < H; col++)
	{
		for (int row = 0; row < W; row++)
		{
			if ((col == Player_Pos.Y) && (row == Player_Pos.X)) {
				SetConsoleTextAttribute(outputHandle, 4);
				std::cout << "P" << "  ";
			}
			else if (((col - Player_Pos.Y + (40 / 2)) > 10) && ((row - Player_Pos.X + (138 / 2)) > 60) && ((col - Player_Pos.Y + (40 / 2)) < 30) && ((row - Player_Pos.X + (138 / 2)) < 78)) {
				switch (mapVector[col][row]) {
				case '#':
					SetConsoleTextAttribute(outputHandle, 1);
					std::cout << mapVector[col][row] << "  ";
					break;
				case '.':
					SetConsoleTextAttribute(outputHandle, 2);
					std::cout << mapVector[col][row] << "  ";
					break;
				case 'L':
					SetConsoleTextAttribute(outputHandle, 4);
					std::cout << mapVector[col][row] << "  ";
					break;
				default:
					SetConsoleTextAttribute(outputHandle, 7);
					std::cout << mapVector[col][row] << "  ";
					break;
				}


			}
			else {
				std::cout << "   ";
			}

		}

		GridCoords.Y++;
		SetConsoleCursorPosition(outputHandle, GridCoords);
	}
}

void Map::UpdatePlayer() const
{
	Utility::PositionText(max_Size.X / 7, max_Size.Y / 2);
	std::cout << Cyan << "P" << ResetColour;
	Utility::PositionText(0, 0);
}

void Map::checkNPC() const
{
	if ((mapVector[Player_Pos.Y + 1][Player_Pos.X]) == 'O'
		|| (mapVector[Player_Pos.Y][Player_Pos.X] + 1) == 'O'
		|| (mapVector[Player_Pos.Y - 1][Player_Pos.X]) == 'O'
		|| (mapVector[Player_Pos.Y][Player_Pos.X - 1]) == 'O') {
		system("cls");
	}
}

Map::Map(int mapNo)
{
	GetConsoleScreenBufferInfo(GetStdHandle(STD_OUTPUT_HANDLE), &CSBI);
	Screen.X = CSBI.srWindow.Right - CSBI.srWindow.Left + 1;
	Screen.Y = CSBI.srWindow.Bottom - CSBI.srWindow.Top + 1;

	switch (mapNo)
	{
		//Outdoor Maps
		//World Map (A General Map thats like a top down view of a city (Library, Shop, House...)
		// 
		//Indoor Maps
		//Lobby/Spawn (Area where detective (YOU) Spawn in to select your party members)
		//Interrogation Room (Where the Police are interrogating the suspect)
		//Library Receptionist (Where you meet the Librarian)
		//Library Book Section (Just a random part of the Library. Explore for clues, will bump into forbidden area at the edge)
		//Library Forbidden Section
		//Important Person House Room 1
		//Important Person House Room 2
		//Important Person House Room 3
		//Shop 
	case 1:
		// world map
		mapVector = {
		{'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',},
		{'#','#','#','#','-','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','#','L','.','.','.','.','.','D','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','|','.','.','.','.','.','.','.','.','.','.','.','.','*','^','*','.','.','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','{','M','}','.','.','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','_','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','/','_','\\','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','-','-','-','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','S','|','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','-','-','-','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','|','-','-','X','-','-','|','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','|','.','.','.','.','.','|','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','|','.','.','.','.','.','|','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','|','.','.','.','.','.','|','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','|','h','o','u','s','e','|','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','|','.','.','.','.','.','|','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','|','.','.','.','.','.','|','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','|','.','.','.','.','.','|','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','|','-','-','-','-','-','|','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','_','.','.','.','.','.','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','|','_','_','_','|','.','.','.','.','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','|','_','_','_','|','.','.','.','.','.','.','#',},
		{'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',},
		};
		break;
	case 2:
		//reception room
		mapVector = {
		{'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','.','.','.','.','.','.','|','C','|','.','^','.','.','.','#',},
		{'#','.','.','.','.','.','.','[','-',']','.','|','.','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','.','_','.','.','.','#',},
		{'#','.','.','.','.','-','.','.','.','.','.','.','.','.','.','#',},
		{'#','.','.','.',']','|','.','.','.','.','.','.','.','.','.','#',},
		{'#','.','.','.',']','|','.','.','.','.','.','.','.','.','.','#',},
		{'#','.','.','.','.','-','.','.','.','.','.','.','.','.','.','I',},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','#','#','#','#','#','D','O','O','R','#','#','#','#','#','#',},
		};
	case 3:
		//reception room
		mapVector = {
		{'#','#','#','#','#','#','#','#',},
		{'#','.','.','.','#',},
		{'#','.','F','.','#',},
		{'#','.','.','.','#',},
		{'#','.','.','.','#',},
		{'#','.','.','.','#',},
		{'#','.','.','.','#',},
		{'#','.','.','.','#',},
		{'#','.','.','.','#',},
		{'#','#','D','#','#',},
		};
	default:
		break;
	}
	H = mapVector.size();
	W = mapVector[0].size();
	Player_Pos.Y = (H / 2);
	Player_Pos.X = (W / 2);
}