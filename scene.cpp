#include "scene.h"
#include <stdio.h>
#include <Windows.h>
HANDLE h = GetStdHandle(STD_OUTPUT_HANDLE);

void scene::move(const int x, const int y) {
	if ((map[playerpos.Y + y][playerpos.X + x]) == '.') {
		playerpos.Y=(playerpos.Y + y);
		if (playerpos.Y < 0) {
			playerpos.Y= 0;
		}
		if (playerpos.Y > H - 1) {
			playerpos.Y = (H-1);
		}
		playerpos.X=(playerpos.X + x);
		if (playerpos.X < 0) {
			playerpos.X = 0;
		}
		if (playerpos.X > W - 1) {
			playerpos.X = W-1;
		}
	}
}



scene::scene(int x)
{

	switch (x)
	{
		//Outdoor Maps
		//World Map (A General Map thats like a top down view of a city (Library, Shop, House...)
		// 
		//Indoor Maps
		//Lobby/Spawn (Area where detective (YOU) Spawn in to select your party members)
		//Interrogation Room (Where the Police are interrogating the suspect)
		//Library Receptionist (Where you meet the Librarian)
		//Library Book Section (Just a random part of the Library. Explore for clues, will bump into forbidden area at the edge)
		//Library Forbidden Section
		//Important Person House Room 1
		//Important Person House Room 2
		//Important Person House Room 3
		//Shop

	case 1:
		// world map
		map = {
		{'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',},
		{'#','#','#','#','-','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','#','L','.','.','.','.','.','D','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','|','.','.','.','.','.','.','.','.','.','.','.','.','*','^','*','.','.','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','{','M','}','.','.','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','_','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','/','_','_','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','-','-','-','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','S','|','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','-','-','-','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','|','-','-','-','-','-','|','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','|','.','.','.','.','.','|','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','|','.','.','.','.','.','|','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','|','.','.','.','.','.','|','.','.','[','.','.','.',']','.','.','.','.','.','.','#',},
		{'#','|','h','o','u','s','e','|','.','.','|','<','g','>','|','.','.','.','.','.','.','#',},
		{'#','|','.','.','.','.','.','|','.','.','|','_','_','_','|','.','.','.','.','.','.','#',},
		{'#','|','.','.','.','.','.','|','.','.','|','_','_','_','|','.','.','.','.','.','.','#',},
		{'#','|','.','.','.','.','.','|','.','.','|','_','_','_','|','.','.','.','.','.','.','#',},
		{'#','|','-','-','-','-','-','|','.','.','|','_','_','_','|','.','.','.','.','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','|','_','_','_','|','.','.','.','.','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','|','_','_','_','|','.','.','.','.','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','|','_','_','_','|','.','.','.','.','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','|','_','_','_','|','.','.','.','.','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','|','_','_','_','|','.','.','.','.','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','|','_','_','_','|','.','.','.','.','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','|','_','_','_','|','.','.','.','.','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','|','_','_','_','|','.','.','.','.','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','|','_','_','_','|','.','.','.','.','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','|','_','_','_','|','.','.','.','.','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','|','_','_','_','|','.','.','.','.','.','.','#',},
		{'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',},
		};
		break;
	case 2:
		//reception room
		map = {
		{'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','.','.','.','.','.','.','|','C','|','.','^','.','.','.','#',},
		{'#','.','.','.','.','.','.','[','-',']','.','|','.','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','.','_','.','.','.','#',},
		{'#','.','.','.','.','-','.','.','.','.','.','.','.','.','.','#',},
		{'#','.','.','.',']','|','.','.','.','.','.','.','.','.','.','#',},
		{'#','.','.','.',']','|','.','.','.','.','.','.','.','.','.','#',},
		{'#','.','.','.','.','-','.','.','.','.','.','.','.','.','.','I',},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#',},
		{'#','#','#','#','#','#','D','O','O','R','#','#','#','#','#','#',},
		};
	case 3:
		//reception room
		map = {
		{'#','#','#','#','#',},
		{'#','.','.','.','#',},
		{'#','.','F','.','#',},
		{'#','.','.','.','#',},
		{'#','.','.','.','#',},
		{'#','.','.','.','#',},
		{'#','.','.','.','#',},
		{'#','.','.','.','#',},
		{'#','.','.','.','#',},
		{'#','#','D','#','#',},
		};
	default:
		break;
	}
	H = map.size();
	W = map[0].size();
	playerpos.Y=(H/2);
	playerpos.X=(W/2);
	
}

void scene::gridgen()const
{
	
	COORD zone1_Coords = { max_size.X / 2 - (playerpos.X * 3), max_size.Y / 2 - playerpos.Y };
	SetConsoleCursorPosition(h, zone1_Coords);
	for (int col = 0; col < H; col++)
	{
		for (int row = 0; row < W; row++)
		{
			if (((col - playerpos.Y + (max_size.Y / 2))  > 10)&&((row - playerpos.X + (max_size.X / 2)) > 60) && ((col - playerpos.Y + (max_size.Y / 2)) < (max_size.Y-10)) && ((row - playerpos.X + (max_size.X / 2)) < (max_size.X-60))) {
				switch (map[col][row]) {
					case '#':
						SetConsoleTextAttribute(h, 1);
						std::cout << map[col][row] << "  " << std::flush;
						break;
					case '.':
						SetConsoleTextAttribute(h, 2);
						std::cout << map[col][row] << "  " << std::flush;
						break;
					case 'L':
						SetConsoleTextAttribute(h, 4);
						std::cout << map[col][row] << "  " << std::flush;
						break;
					default:
						SetConsoleTextAttribute(h, 7);
						std::cout << map[col][row] << "  " << std::flush;
						break;
				}

				
			}
			else {
				std::cout << "   ";
			}

		}

		zone1_Coords.Y++;
		SetConsoleCursorPosition(h, zone1_Coords);
	}
}

void scene::plrgen() const
{
	COORD zone2_Coords = { 7, 2 };
	SetConsoleCursorPosition(h, zone2_Coords);

	std::cout << "\033[1;35mP\033[0m";
}
//void scene::plrupdate() const
//{
//	COORD zone1_Coords = { (playerpos.getx() * 3) + 3, playerpos.gety() + 1 };
//	SetConsoleCursorPosition(h, zone1_Coords);
//	std::cout << "\033[1;35mP\033[0m";
//	COORD zone12_Coords = { 700, 2 };
//	SetConsoleCursorPosition(h, zone12_Coords);
//}
void scene::plrupdate() const
{
	COORD zone1_Coords = { max_size.X / 2 , max_size.Y / 2};
	SetConsoleCursorPosition(h, zone1_Coords);
	std::cout << "\033[1;35mP\033[0m";

}

void scene::checkNPC() const
{
	if ((map[playerpos.Y + 1][playerpos.X]) == 'O' 
		|| (map[playerpos.Y][playerpos.X] + 1) == 'O'
		|| (map[playerpos.Y - 1][playerpos.X]) == 'O'
		|| (map[playerpos.Y][playerpos.X - 1]) == 'O') {
		system("cls");
	}
}